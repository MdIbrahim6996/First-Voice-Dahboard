generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  name               String
  employeeId         String               @default("")
  phone              String               @default("")
  isBlocked          Boolean              @default(false)
  password           String
  role               String               @default("user")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  attendances        Attendance[]
  Lead               Lead[]
  Notification       Notification[]
  LeadCount          LeadCount[]
  StatusChangeReason StatusChangeReason[]
}

model Process {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
  plans     Plan[]
}

model Plan {
  id        Int      @id @default(autoincrement())
  name      String
  processId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
  process   Process? @relation(fields: [processId], references: [id], onDelete: SetNull)
}

model Holiday {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id       Int      @id @default(autoincrement())
  userId   Int      @default(1)
  isLate   Boolean  @default(false)
  dateTime DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}

model Appliance {
  id              Int      @id @default(autoincrement())
  name            String
  makeOfAppliance String
  age             Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Lead            Lead[]
}

model Lead {
  id                 Int                  @id @default(autoincrement())
  title              String
  firstName          String
  middleName         String?
  lastName           String
  centre             String
  address            String?
  city               String?
  country            String?
  pincode            String
  password           String?
  dateOfBirth        DateTime?
  phone              String?
  processId          Int?
  planId             Int?
  closerId           Int?
  fee                Int?
  currency           String?
  bankName           String
  accountName        String?
  sort               String?
  applianceId        Int?
  statusId           Int?                 @default(1)
  saleDate           DateTime             @default(now())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  status             Status?              @relation(fields: [statusId], references: [id], onDelete: SetNull)
  appliance          Appliance?           @relation(fields: [applianceId], references: [id], onDelete: SetNull)
  closer             User?                @relation(fields: [closerId], references: [id], onDelete: SetNull)
  plan               Plan?                @relation(fields: [planId], references: [id], onDelete: SetNull)
  process            Process?             @relation(fields: [processId], references: [id], onDelete: SetNull)
  StatusChangeReason StatusChangeReason[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  type      String
  userId    Int
  saleDate  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model LeadCount {
  id        Int      @id @default(autoincrement())
  count     Int      @default(0)
  date      Int
  month     Int
  year      Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, month, year, userId], name: "uniqueDate")
}

model StatusChangeReason {
  id     Int    @id @default(autoincrement())
  reason String
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  leadId Int
  lead   Lead   @relation(fields: [leadId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
