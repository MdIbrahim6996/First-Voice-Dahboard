generator client {
  provider        = "prisma-client-js"
  output          = "generated/prisma/client"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  name       String
  employeeId String  @default("")
  phone      String  @default("")
  isBlocked  Boolean @default(false)
  password   String
  role       String  @default("user")

  attendances Attendance[]
  Lead        Lead[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
  LeadCount    LeadCount[]
}

model Process {
  id    Int    @id @default(autoincrement())
  name  String @unique
  plans Plan[]
  Lead  Lead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id        Int     @id @default(autoincrement())
  name      String
  processId Int     @default(1)
  process   Process @relation(fields: [processId], references: [id])
  Lead      Lead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Holiday {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id       Int      @id @default(autoincrement())
  userId   Int      @default(1)
  user     User     @relation(fields: [userId], references: [id])
  isLate   Boolean  @default(false)
  dateTime DateTime @default(now())
}

model Appliance {
  id              Int    @id @default(autoincrement())
  name            String
  makeOfAppliance String
  age             Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
}

model Lead {
  id          Int       @id @default(autoincrement())
  title       String
  firstName   String
  middleName  String?
  lastName    String
  centre      String
  address     String?
  city        String?
  country     String?
  pincode     String
  password    String?
  dateOfBirth DateTime?
  phone       String?
  process     Process?  @relation(fields: [processId], references: [id], onDelete: SetNull)
  processId   Int?
  plan        Plan?     @relation(fields: [planId], references: [id], onDelete: SetNull)
  planId      Int?
  closer      User?     @relation(fields: [closerId], references: [id], onDelete: SetNull)
  closerId    Int?
  fee         Int?
  currency    String?
  bankName    String
  accountName String?
  sort        String?

  appliance   Appliance? @relation(fields: [applianceId], references: [id])
  applianceId Int?

  // cardNumber      String?
  // expiryDateYear  Int?
  // expiryDateMonth Int?
  // cvv             Int?

  // comment String?

  status   Status @relation(fields: [statusId], references: [id])
  statusId Int    @default(1)

  saleDate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Lead      Lead[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  saleDate  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeadCount {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
